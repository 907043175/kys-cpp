#include "MainMap.h"
#include <iomanip>
#include <fstream>
#include <istream>
#include <ostream>

MainMap::MapArray MainMap::Earth, MainMap::Surface, MainMap::Building, MainMap::BuildX, MainMap::BuildY;

MainMap::MainMap()
{
    if (!_readed)
    {
        ReadMap();
    }
    _readed = true;
}

MainMap::~MainMap()
{
}

void MainMap::ReadMap()
{
    log("Reading main map.");
	int length = sizeof(MapArray);
    ReadFile("earth.002", Earth, length);
	ReadFile("surface.002", Surface, length);
	ReadFile("building.002", Building, length);
	ReadFile("buildy.002", BuildY, length);
	ReadFile("buildx.002", BuildX, length);
}

void MainMap::Draw()
{
    int k = 0;
    int widthregion = 320 / 36 + 3;
    int sumregion = 220 / 9 + 2;
    float sss = clock();

    std::map<int, int> BuildingsMap;

	//auto s = MySprite::create();
	//tex->addChild(s);
	//tex->setClearFlags(GL_COLOR_BUFFER_BIT);
    for (int sum = -sumregion; sum <= sumregion + 15; sum++)
    {
        for (int i = -widthregion; i <= widthregion; i++)
        {
            int i1 = Mx + i + (sum / 2);
            int i2 = My - i + (sum - sum / 2);
            auto p = GetPositionOnScreen(i1, i2, Mx, My);
            if (i1 >= 0 && i1 < 480 && i2 >= 0 && i2 < 480)
            {
                if (Earth[i1][i2] > 0)
                {
					auto t = MyTextrue2D::getSelfPointer(0, Earth[i1][i2] / 2);
					auto s = EarthS[k];
					setSpriteTextureWithIndex(s, t, p);
                }
				SurfaceS[k]->setVisible(false);
                if (Surface[i1][i2] > 0)
                {
					auto t = MyTextrue2D::getSelfPointer(0, Surface[i1][i2] / 2);
					auto s = SurfaceS[k];
					setSpriteTextureWithIndex(s, t, p);
                }
				BuildingS[k]->setVisible(false);
				if (Building[i1][i2] > 0)
				{
					auto t = MyTextrue2D::getSelfPointer(0, Building[i1][i2] / 2);
					auto s = BuildingS[k];
					setSpriteTextureWithIndex(s, t, p);
					if (t->getTexture())
					{
						//根据图片的宽度计算图的中点, 为避免出现小数, 实际是中点坐标的2倍
						//次要排序依据是y坐标
						int c = ((i1 + i2) - (t->getTexture()->getPixelsWide() + 35) / 36 - (-t->getOffset().y - t->getTexture()->getPixelsHigh() + 1) / 9) * 1024 + i2;
						s->setZOrder(c);
					}
				}				
                else if (i1 == Mx && i2 == My)
                {
					auto t = MyTextrue2D::getSelfPointer(0, 5001);
					auto s = BuildingS[k];
					setSpriteTextureWithIndex(s, t, p);
						s->setZOrder(1024 * (i1+i2) + i2);
                }
            }
			k++;
        }
    }
	//log("%f, %d", (clock() - sss) / CLOCKS_PER_SEC, k);
}

bool MainMap::init()
{
    if (!Layer::init())
    {
        return false;
    }

	int widthregion = 320 / 36 + 3;
	int sumregion = 220 / 9 + 2;

	for (int sum = -sumregion; sum <= sumregion + 15; sum++)
	{
		for (int i = -widthregion; i <= widthregion; i++)
		{
			addNewSpriteIntoVector(EarthS);
			addNewSpriteIntoVector(SurfaceS);
			addNewSpriteIntoVector(BuildingS);
		}
	}

	char s[256];
	char* path = "mmap";
	short offset[6000][2];
	ReadFile("mmap/index.ka", offset,6000*4);
	for (int index = 0; index < 6000; index++)
	{
		MyTextrue2D::addImage(path, index, offset[index][0], offset[index][1]);
	}

    Mx = 240;
    My = 240;

    Draw();

    auto keyboardListener = EventListenerKeyboard::create();
    keyboardListener->onKeyPressed = CC_CALLBACK_2(MainMap::keyPressed, this);
    keyboardListener->onKeyReleased = CC_CALLBACK_2(MainMap::keyReleased, this);
    _eventDispatcher->addEventListenerWithSceneGraphPriority(keyboardListener, this);

	schedule(schedule_selector(MainMap::checkTimer), 0.01, kRepeatForever, 0.025);

    return true;
}

Scene* MainMap::createScene()
	{
		auto scene = Scene::create();
		auto layer = MainMap::create();
		scene->addChild(layer);
		return scene;
	}

void MainMap::addNewSpriteIntoVector(std::vector<Sprite*> &v)
{
	auto s = Sprite::create();
	s->setAnchorPoint(Point(0, 1));
	this->addChild(s, 0);
	v.push_back(s);
}

void MainMap::keyPressed(EventKeyboard::KeyCode keyCode, Event* event)
{
    log("%d", keyCode);
	keypressing = keyCode;
	/*switch (keyCode)
    {
        case EventKeyboard::KeyCode::KEY_LEFT_ARROW:
        {
            Mx--;
            break;
        }
        case EventKeyboard::KeyCode::KEY_RIGHT_ARROW:
        {
            Mx++;
            break;
        }
        case EventKeyboard::KeyCode::KEY_UP_ARROW:
        {
            My--;
            break;
        }
        case EventKeyboard::KeyCode::KEY_DOWN_ARROW:
        {
            My++;
            break;
        }
    }
    Draw();*/
    //BackGround->setTexture(tex->getSprite()->getTexture());
}

void MainMap::keyReleased(EventKeyboard::KeyCode keyCode, Event* event)
{
	keypressing = EventKeyboard::KeyCode::KEY_NONE;
}

void MainMap::checkTimer(float dt)
{
	if (keypressing == EventKeyboard::KeyCode::KEY_NONE) 
		return;
	switch (keypressing)
	{
	case EventKeyboard::KeyCode::KEY_LEFT_ARROW:
	{
		My--;
		break;
	}
	case EventKeyboard::KeyCode::KEY_RIGHT_ARROW:
	{
		My++;
		break;
	}
	case EventKeyboard::KeyCode::KEY_UP_ARROW:
	{
		Mx--;
		break;
	}
	case EventKeyboard::KeyCode::KEY_DOWN_ARROW:
	{
		Mx++;
		break;
	}
	}
	Draw();
	//BackGround->setTexture(tex->getSprite()->getTexture());
}
